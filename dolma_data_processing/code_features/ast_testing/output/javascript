Node type: program, Node.text: function f(a) {\n...
  Node type: function_declaration, Node.text: function f(a) {\n...
    Node type: identifier, Node.text: f
    Node type: formal_parameters, Node.text: (a)
      Node type: identifier, Node.text: a
    Node type: statement_block, Node.text: {\n    return;\n}
      Node type: return_statement, Node.text: return;
  Node type: expression_statement, Node.text: x = 1;
    Node type: assignment_expression, Node.text: x = 1
      Node type: identifier, Node.text: x
      Node type: number, Node.text: 1
  Node type: variable_declaration, Node.text: var x = 2;
    Node type: variable_declarator, Node.text: x = 2
      Node type: identifier, Node.text: x
      Node type: number, Node.text: 2
  Node type: lexical_declaration, Node.text: let x = 3;
    Node type: variable_declarator, Node.text: x = 3
      Node type: identifier, Node.text: x
      Node type: number, Node.text: 3
  Node type: lexical_declaration, Node.text: const x = 4;
    Node type: variable_declarator, Node.text: x = 4
      Node type: identifier, Node.text: x
      Node type: number, Node.text: 4
  Node type: function_declaration, Node.text: function main() {...
    Node type: identifier, Node.text: main
    Node type: formal_parameters, Node.text: ()
    Node type: statement_block, Node.text: {\n    x += 1;\n ...
      Node type: expression_statement, Node.text: x += 1;
        Node type: augmented_assignment_expression, Node.text: x += 1
          Node type: identifier, Node.text: x
          Node type: number, Node.text: 1
      Node type: expression_statement, Node.text: f(x);
        Node type: call_expression, Node.text: f(x)
          Node type: identifier, Node.text: f
          Node type: arguments, Node.text: (x)
            Node type: identifier, Node.text: x
  Node type: expression_statement, Node.text: x = 3;
    Node type: assignment_expression, Node.text: x = 3
      Node type: identifier, Node.text: x
      Node type: number, Node.text: 3
  Node type: expression_statement, Node.text: x *= 2;
    Node type: augmented_assignment_expression, Node.text: x *= 2
      Node type: identifier, Node.text: x
      Node type: number, Node.text: 2
  Node type: function_declaration, Node.text: function dp(c, d)...
    Node type: identifier, Node.text: dp
    Node type: formal_parameters, Node.text: (c, d)
      Node type: identifier, Node.text: c
      Node type: identifier, Node.text: d
    Node type: statement_block, Node.text: {\n    let ans = ...
      Node type: lexical_declaration, Node.text: let ans = 0;
        Node type: variable_declarator, Node.text: ans = 0
          Node type: identifier, Node.text: ans
          Node type: number, Node.text: 0
      Node type: for_statement, Node.text: for (let i = 0; i...
        Node type: lexical_declaration, Node.text: let i = 0;
          Node type: variable_declarator, Node.text: i = 0
            Node type: identifier, Node.text: i
            Node type: number, Node.text: 0
        Node type: expression_statement, Node.text: i < c.length;
          Node type: binary_expression, Node.text: i < c.length
            Node type: identifier, Node.text: i
            Node type: member_expression, Node.text: c.length
              Node type: identifier, Node.text: c
              Node type: property_identifier, Node.text: length
        Node type: update_expression, Node.text: i++
          Node type: identifier, Node.text: i
        Node type: statement_block, Node.text: {\n        ans +=...
          Node type: expression_statement, Node.text: ans += c[i] * d[i];
            Node type: augmented_assignment_expression, Node.text: ans += c[i] * d[i]
              Node type: identifier, Node.text: ans
              Node type: binary_expression, Node.text: c[i] * d[i]
                Node type: subscript_expression, Node.text: c[i]
                  Node type: identifier, Node.text: c
                  Node type: identifier, Node.text: i
                Node type: subscript_expression, Node.text: d[i]
                  Node type: identifier, Node.text: d
                  Node type: identifier, Node.text: i
      Node type: return_statement, Node.text: return ans;
        Node type: identifier, Node.text: ans

--------------------------------------------------

node_depth: [0, 1, 2, 2, 3, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 2, 2, 3, 4, 5, 5, 3, 4, 5, 5, 6, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 2, 3, 3, 2, 3, 4, 5, 5, 3, 4, 5, 6, 6, 4, 5, 6, 6, 7, 7, 4, 5, 4, 5, 6, 7, 7, 8, 9, 9, 8, 9, 9, 3, 4]

--------------------------------------------------

tree_depth: [0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9]

--------------------------------------------------

dist_to_def: [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 29, None, None, None, 98, None, 43, None, None, None, None, None, None, 6, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 6, None, 48, None, None, 20, None, None, None, 55, None, None, 80, 44, None, 84, 51, None, 92]

--------------------------------------------------

node_type: [132, 199, 1, 230, 1, 150, 164, 146, 208, 1, 115, 147, 149, 1, 115, 148, 149, 1, 115, 148, 149, 1, 115, 199, 1, 230, 150, 146, 210, 1, 115, 146, 203, 1, 224, 1, 146, 208, 1, 115, 146, 210, 1, 115, 199, 1, 230, 1, 1, 150, 148, 149, 1, 115, 154, 148, 149, 1, 115, 146, 215, 1, 206, 1, 1, 217, 1, 150, 146, 210, 1, 215, 207, 1, 1, 207, 1, 1, 164, 1]

--------------------------------------------------

num_nodes_input: [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80]
