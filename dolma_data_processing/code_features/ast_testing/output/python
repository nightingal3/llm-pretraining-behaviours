Node type: module, Node.text: def dp(x, y):\n  ...
  Node type: function_definition, Node.text: def dp(x, y):\n  ...
    Node type: identifier, Node.text: dp
    Node type: parameters, Node.text: (x, y)
      Node type: identifier, Node.text: x
      Node type: identifier, Node.text: y
    Node type: block, Node.text: ans = 0\n    for ...
      Node type: expression_statement, Node.text: ans = 0
        Node type: assignment, Node.text: ans = 0
          Node type: identifier, Node.text: ans
          Node type: integer, Node.text: 0
      Node type: for_statement, Node.text: for i in range(le...
        Node type: identifier, Node.text: i
        Node type: call, Node.text: range(len(x))
          Node type: identifier, Node.text: range
          Node type: argument_list, Node.text: (len(x))
            Node type: call, Node.text: len(x)
              Node type: identifier, Node.text: len
              Node type: argument_list, Node.text: (x)
                Node type: identifier, Node.text: x
        Node type: block, Node.text: ans += x[i] * y[i]
          Node type: expression_statement, Node.text: ans += x[i] * y[i]
            Node type: augmented_assignment, Node.text: ans += x[i] * y[i]
              Node type: identifier, Node.text: ans
              Node type: binary_operator, Node.text: x[i] * y[i]
                Node type: subscript, Node.text: x[i]
                  Node type: identifier, Node.text: x
                  Node type: identifier, Node.text: i
                Node type: subscript, Node.text: y[i]
                  Node type: identifier, Node.text: y
                  Node type: identifier, Node.text: i
      Node type: return_statement, Node.text: return ans
        Node type: identifier, Node.text: ans

--------------------------------------------------

node_depth: [0, 1, 2, 2, 3, 3, 2, 3, 4, 5, 5, 3, 4, 4, 5, 5, 6, 7, 7, 8, 4, 5, 6, 7, 7, 8, 9, 9, 8, 9, 9, 3, 4]

--------------------------------------------------

tree_depth: [0, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9]

--------------------------------------------------

dist_to_def: [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 41, None, None, None, 41, None, None, 61, None, None, 65, None, None, 71]

--------------------------------------------------

node_type: [108, 146, 1, 147, 1, 1, 161, 122, 197, 1, 93, 137, 1, 205, 1, 158, 205, 1, 158, 1, 161, 122, 198, 1, 192, 203, 1, 1, 203, 1, 1, 125, 1]

--------------------------------------------------

num_nodes_input: [33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33]
