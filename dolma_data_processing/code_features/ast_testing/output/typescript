Node type: program, Node.text: function g(a: num...
  Node type: function_declaration, Node.text: function g(a: num...
    Node type: identifier, Node.text: g
    Node type: formal_parameters, Node.text: (a: number)
      Node type: required_parameter, Node.text: a: number
        Node type: identifier, Node.text: a
        Node type: type_annotation, Node.text: : number
          Node type: predefined_type, Node.text: number
    Node type: type_annotation, Node.text: : void
      Node type: predefined_type, Node.text: void
    Node type: statement_block, Node.text: {\n    return;\n}
      Node type: return_statement, Node.text: return;
  Node type: lexical_declaration, Node.text: let y: number = 5;
    Node type: variable_declarator, Node.text: y: number = 5
      Node type: identifier, Node.text: y
      Node type: type_annotation, Node.text: : number
        Node type: predefined_type, Node.text: number
      Node type: number, Node.text: 5
  Node type: expression_statement, Node.text: y += 1;
    Node type: augmented_assignment_expression, Node.text: y += 1
      Node type: identifier, Node.text: y
      Node type: number, Node.text: 1
  Node type: expression_statement, Node.text: g(y);
    Node type: call_expression, Node.text: g(y)
      Node type: identifier, Node.text: g
      Node type: arguments, Node.text: (y)
        Node type: identifier, Node.text: y
  Node type: function_declaration, Node.text: function main(): ...
    Node type: identifier, Node.text: main
    Node type: formal_parameters, Node.text: ()
    Node type: type_annotation, Node.text: : void
      Node type: predefined_type, Node.text: void
    Node type: statement_block, Node.text: {\n    let x = 1;...
      Node type: lexical_declaration, Node.text: let x = 1;
        Node type: variable_declarator, Node.text: x = 1
          Node type: identifier, Node.text: x
          Node type: number, Node.text: 1
      Node type: return_statement, Node.text: return;
  Node type: function_declaration, Node.text: function dp(x: nu...
    Node type: identifier, Node.text: dp
    Node type: formal_parameters, Node.text: (x: number[], y: ...
      Node type: required_parameter, Node.text: x: number[]
        Node type: identifier, Node.text: x
        Node type: type_annotation, Node.text: : number[]
          Node type: array_type, Node.text: number[]
            Node type: predefined_type, Node.text: number
      Node type: required_parameter, Node.text: y: number[]
        Node type: identifier, Node.text: y
        Node type: type_annotation, Node.text: : number[]
          Node type: array_type, Node.text: number[]
            Node type: predefined_type, Node.text: number
    Node type: type_annotation, Node.text: : number
      Node type: predefined_type, Node.text: number
    Node type: statement_block, Node.text: {\n    let ans: n...
      Node type: lexical_declaration, Node.text: let ans: number =...
        Node type: variable_declarator, Node.text: ans: number = 0
          Node type: identifier, Node.text: ans
          Node type: type_annotation, Node.text: : number
            Node type: predefined_type, Node.text: number
          Node type: number, Node.text: 0
      Node type: for_statement, Node.text: for (let i = 0; i...
        Node type: lexical_declaration, Node.text: let i = 0;
          Node type: variable_declarator, Node.text: i = 0
            Node type: identifier, Node.text: i
            Node type: number, Node.text: 0
        Node type: expression_statement, Node.text: i < x.length;
          Node type: binary_expression, Node.text: i < x.length
            Node type: identifier, Node.text: i
            Node type: member_expression, Node.text: x.length
              Node type: identifier, Node.text: x
              Node type: property_identifier, Node.text: length
        Node type: update_expression, Node.text: i++
          Node type: identifier, Node.text: i
        Node type: statement_block, Node.text: {\n        ans +=...
          Node type: expression_statement, Node.text: ans += x[i] * y[i];
            Node type: augmented_assignment_expression, Node.text: ans += x[i] * y[i]
              Node type: identifier, Node.text: ans
              Node type: binary_expression, Node.text: x[i] * y[i]
                Node type: subscript_expression, Node.text: x[i]
                  Node type: identifier, Node.text: x
                  Node type: identifier, Node.text: i
                Node type: subscript_expression, Node.text: y[i]
                  Node type: identifier, Node.text: y
                  Node type: identifier, Node.text: i
      Node type: return_statement, Node.text: return ans;
        Node type: identifier, Node.text: ans

--------------------------------------------------

node_depth: [0, 1, 2, 2, 3, 4, 4, 5, 2, 3, 2, 3, 1, 2, 3, 3, 4, 3, 1, 2, 3, 3, 1, 2, 3, 3, 4, 1, 2, 2, 2, 3, 2, 3, 4, 5, 5, 3, 1, 2, 2, 3, 4, 4, 5, 6, 3, 4, 4, 5, 6, 2, 3, 2, 3, 4, 5, 5, 6, 5, 3, 4, 5, 6, 6, 4, 5, 6, 6, 7, 7, 4, 5, 4, 5, 6, 7, 7, 8, 9, 9, 8, 9, 9, 3, 4]

--------------------------------------------------

tree_depth: [0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9]

--------------------------------------------------

dist_to_def: [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 14, None, None, None, 62, None, 24, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 6, None, 84, None, None, 20, None, None, None, 63, None, None, 116, 44, None, 110, 51, None, 100]

--------------------------------------------------

node_type: [161, 220, 1, 253, 291, 1, 296, 327, 296, 327, 179, 193, 177, 178, 1, 296, 327, 111, 175, 234, 1, 111, 175, 227, 1, 248, 1, 220, 1, 253, 296, 327, 179, 177, 178, 1, 111, 193, 220, 1, 253, 291, 1, 296, 338, 327, 291, 1, 296, 338, 327, 296, 327, 179, 177, 178, 1, 296, 327, 111, 183, 177, 178, 1, 111, 175, 239, 1, 230, 1, 1, 241, 1, 179, 175, 234, 1, 239, 231, 1, 1, 231, 1, 1, 193, 1]

--------------------------------------------------

num_nodes_input: [86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86]
