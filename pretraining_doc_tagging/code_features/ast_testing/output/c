Node type: translation_unit, Node.text: int y = 1;\nconst...
  Node type: declaration, Node.text: int y = 1;
    Node type: primitive_type, Node.text: int
    Node type: init_declarator, Node.text: y = 1
      Node type: identifier, Node.text: y
      Node type: number_literal, Node.text: 1
  Node type: declaration, Node.text: const int y = 2;
    Node type: type_qualifier, Node.text: const
    Node type: primitive_type, Node.text: int
    Node type: init_declarator, Node.text: y = 2
      Node type: identifier, Node.text: y
      Node type: number_literal, Node.text: 2
  Node type: function_definition, Node.text: void f(int a) {\n...
    Node type: primitive_type, Node.text: void
    Node type: function_declarator, Node.text: f(int a)
      Node type: identifier, Node.text: f
      Node type: parameter_list, Node.text: (int a)
        Node type: parameter_declaration, Node.text: int a
          Node type: primitive_type, Node.text: int
          Node type: identifier, Node.text: a
    Node type: compound_statement, Node.text: {\n    return;\n}
      Node type: return_statement, Node.text: return;
  Node type: function_definition, Node.text: int main() {\n   ...
    Node type: primitive_type, Node.text: int
    Node type: function_declarator, Node.text: main()
      Node type: identifier, Node.text: main
      Node type: parameter_list, Node.text: ()
    Node type: compound_statement, Node.text: {\n    int x = 5;...
      Node type: declaration, Node.text: int x = 5;
        Node type: primitive_type, Node.text: int
        Node type: init_declarator, Node.text: x = 5
          Node type: identifier, Node.text: x
          Node type: number_literal, Node.text: 5
      Node type: expression_statement, Node.text: x ++;
        Node type: update_expression, Node.text: x ++
          Node type: identifier, Node.text: x
      Node type: expression_statement, Node.text: f(x);
        Node type: call_expression, Node.text: f(x)
          Node type: identifier, Node.text: f
          Node type: argument_list, Node.text: (x)
            Node type: identifier, Node.text: x
      Node type: return_statement, Node.text: return 0;
        Node type: number_literal, Node.text: 0
  Node type: function_definition, Node.text: int dp(int x[], i...
    Node type: primitive_type, Node.text: int
    Node type: function_declarator, Node.text: dp(int x[], int y...
      Node type: identifier, Node.text: dp
      Node type: parameter_list, Node.text: (int x[], int y[]...
        Node type: parameter_declaration, Node.text: int x[]
          Node type: primitive_type, Node.text: int
          Node type: array_declarator, Node.text: x[]
            Node type: identifier, Node.text: x
        Node type: parameter_declaration, Node.text: int y[]
          Node type: primitive_type, Node.text: int
          Node type: array_declarator, Node.text: y[]
            Node type: identifier, Node.text: y
        Node type: parameter_declaration, Node.text: int len
          Node type: primitive_type, Node.text: int
          Node type: identifier, Node.text: len
    Node type: compound_statement, Node.text: {\n    int ans = ...
      Node type: declaration, Node.text: int ans = 0;
        Node type: primitive_type, Node.text: int
        Node type: init_declarator, Node.text: ans = 0
          Node type: identifier, Node.text: ans
          Node type: number_literal, Node.text: 0
      Node type: for_statement, Node.text: for (int i = 0; i...
        Node type: declaration, Node.text: int i = 0;
          Node type: primitive_type, Node.text: int
          Node type: init_declarator, Node.text: i = 0
            Node type: identifier, Node.text: i
            Node type: number_literal, Node.text: 0
        Node type: binary_expression, Node.text: i < len
          Node type: identifier, Node.text: i
          Node type: identifier, Node.text: len
        Node type: update_expression, Node.text: i++
          Node type: identifier, Node.text: i
        Node type: compound_statement, Node.text: {\n        ans +=...
          Node type: expression_statement, Node.text: ans += x[i] * y[i];
            Node type: assignment_expression, Node.text: ans += x[i] * y[i]
              Node type: identifier, Node.text: ans
              Node type: binary_expression, Node.text: x[i] * y[i]
                Node type: subscript_expression, Node.text: x[i]
                  Node type: identifier, Node.text: x
                  Node type: identifier, Node.text: i
                Node type: subscript_expression, Node.text: y[i]
                  Node type: identifier, Node.text: y
                  Node type: identifier, Node.text: i
      Node type: return_statement, Node.text: return ans;
        Node type: identifier, Node.text: ans

--------------------------------------------------

node_depth: [0, 1, 2, 2, 3, 3, 1, 2, 2, 2, 3, 3, 1, 2, 2, 3, 3, 4, 5, 5, 2, 3, 1, 2, 2, 3, 3, 2, 3, 4, 4, 5, 5, 3, 4, 5, 3, 4, 5, 5, 6, 3, 4, 1, 2, 2, 3, 3, 4, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 2, 3, 4, 4, 5, 5, 3, 4, 5, 5, 6, 6, 4, 5, 5, 4, 5, 4, 5, 6, 7, 7, 8, 9, 9, 8, 9, 9, 3, 4]

--------------------------------------------------

tree_depth: [0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9]

--------------------------------------------------

dist_to_def: [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 10, None, None, 67, None, 22, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 6, None, None, 15, None, None, None, 50, None, None, 92, 39, None, 90, 46, None, 87]

--------------------------------------------------

node_type: [155, 187, 89, 228, 1, 135, 187, 231, 89, 228, 1, 135, 185, 89, 219, 1, 245, 247, 89, 1, 229, 260, 186, 89, 223, 1, 246, 229, 187, 89, 228, 1, 135, 251, 276, 1, 251, 284, 1, 293, 1, 260, 135, 185, 89, 219, 1, 245, 247, 89, 224, 1, 247, 89, 224, 1, 247, 89, 1, 229, 187, 89, 228, 1, 135, 258, 187, 89, 228, 1, 135, 275, 1, 1, 276, 1, 229, 251, 272, 1, 275, 283, 1, 1, 283, 1, 1, 260, 1]

--------------------------------------------------

num_nodes_input: [89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89]
