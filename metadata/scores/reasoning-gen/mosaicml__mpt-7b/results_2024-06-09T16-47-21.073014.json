{
  "results": {
    "reasoning-gen": {
      "acc,none": 0.0542,
      "acc_stderr,none": 0.0015016016128460616,
      "exact_match,strict-match": 0.07088703563305535,
      "exact_match_stderr,strict-match": 0.004998424310322115,
      "exact_match,flexible-extract": 0.08112206216830932,
      "exact_match_stderr,flexible-extract": 0.0053169847204616785,
      "exact_match,none": 0.04,
      "exact_match_stderr,none": 0.002766524263695846,
      "exact_match,remove_whitespace": 0.0,
      "exact_match_stderr,remove_whitespace": 0.0,
      "alias": "reasoning-gen"
    },
    "arithmetic": {
      "acc,none": 0.0542,
      "acc_stderr,none": 0.0015016016128460616,
      "alias": " - arithmetic"
    },
    "arithmetic_1dc": {
      "acc,none": 0.017,
      "acc_stderr,none": 0.0028913110935905443,
      "alias": "  - arithmetic_1dc"
    },
    "arithmetic_2da": {
      "acc,none": 0.199,
      "acc_stderr,none": 0.008929690346526223,
      "alias": "  - arithmetic_2da"
    },
    "arithmetic_2dm": {
      "acc,none": 0.0485,
      "acc_stderr,none": 0.004804728682127105,
      "alias": "  - arithmetic_2dm"
    },
    "arithmetic_2ds": {
      "acc,none": 0.217,
      "acc_stderr,none": 0.00921943593716572,
      "alias": "  - arithmetic_2ds"
    },
    "arithmetic_3da": {
      "acc,none": 0.0405,
      "acc_stderr,none": 0.004409035585862131,
      "alias": "  - arithmetic_3da"
    },
    "arithmetic_3ds": {
      "acc,none": 0.017,
      "acc_stderr,none": 0.0028913110935905586,
      "alias": "  - arithmetic_3ds"
    },
    "arithmetic_4da": {
      "acc,none": 0.0015,
      "acc_stderr,none": 0.0008655920660521504,
      "alias": "  - arithmetic_4da"
    },
    "arithmetic_4ds": {
      "acc,none": 0.0005,
      "acc_stderr,none": 0.000500000000000013,
      "alias": "  - arithmetic_4ds"
    },
    "arithmetic_5da": {
      "acc,none": 0.001,
      "acc_stderr,none": 0.0007069298939339509,
      "alias": "  - arithmetic_5da"
    },
    "arithmetic_5ds": {
      "acc,none": 0.0,
      "acc_stderr,none": 0.0,
      "alias": "  - arithmetic_5ds"
    },
    "fld": {
      "exact_match,remove_whitespace": 0.0,
      "exact_match_stderr,remove_whitespace": 0.0,
      "alias": " - fld"
    },
    "fld_default": {
      "exact_match,remove_whitespace": 0.0,
      "exact_match_stderr,remove_whitespace": 0.0,
      "alias": "  - fld_default"
    },
    "fld_star": {
      "exact_match,remove_whitespace": 0.0,
      "exact_match_stderr,remove_whitespace": 0.0,
      "alias": "  - fld_star"
    },
    "gsm8k": {
      "exact_match,strict-match": 0.07278241091736164,
      "exact_match_stderr,strict-match": 0.007155604761167468,
      "exact_match,flexible-extract": 0.07657316148597422,
      "exact_match_stderr,flexible-extract": 0.00732456488145157,
      "alias": " - gsm8k"
    },
    "gsm8k_cot": {
      "exact_match,strict-match": 0.06899166034874905,
      "exact_match_stderr,strict-match": 0.006980995834838602,
      "exact_match,flexible-extract": 0.08567096285064443,
      "exact_match_stderr,flexible-extract": 0.007709218855882752,
      "alias": " - gsm8k_cot"
    },
    "minerva_math": {
      "exact_match,none": 0.04,
      "exact_match_stderr,none": 0.002766524263695846,
      "alias": " - minerva_math"
    },
    "minerva_math_algebra": {
      "exact_match,none": 0.03622577927548441,
      "exact_match_stderr,none": 0.005425680006601679,
      "alias": "  - minerva_math_algebra"
    },
    "minerva_math_counting_and_prob": {
      "exact_match,none": 0.046413502109704644,
      "exact_match_stderr,none": 0.009673232932861578,
      "alias": "  - minerva_math_counting_and_prob"
    },
    "minerva_math_geometry": {
      "exact_match,none": 0.033402922755741124,
      "exact_match_stderr,none": 0.008218660203335972,
      "alias": "  - minerva_math_geometry"
    },
    "minerva_math_intermediate_algebra": {
      "exact_match,none": 0.02547065337763012,
      "exact_match_stderr,none": 0.005245830272559335,
      "alias": "  - minerva_math_intermediate_algebra"
    },
    "minerva_math_num_theory": {
      "exact_match,none": 0.040740740740740744,
      "exact_match_stderr,none": 0.008515067163720174,
      "alias": "  - minerva_math_num_theory"
    },
    "minerva_math_prealgebra": {
      "exact_match,none": 0.06659012629161883,
      "exact_match_stderr,none": 0.008452428160416104,
      "alias": "  - minerva_math_prealgebra"
    },
    "minerva_math_precalc": {
      "exact_match,none": 0.029304029304029304,
      "exact_match_stderr,none": 0.007224487305459692,
      "alias": "  - minerva_math_precalc"
    }
  },
  "groups": {
    "reasoning-gen": {
      "acc,none": 0.0542,
      "acc_stderr,none": 0.0015016016128460616,
      "exact_match,strict-match": 0.07088703563305535,
      "exact_match_stderr,strict-match": 0.004998424310322115,
      "exact_match,flexible-extract": 0.08112206216830932,
      "exact_match_stderr,flexible-extract": 0.0053169847204616785,
      "exact_match,none": 0.04,
      "exact_match_stderr,none": 0.002766524263695846,
      "exact_match,remove_whitespace": 0.0,
      "exact_match_stderr,remove_whitespace": 0.0,
      "alias": "reasoning-gen"
    },
    "arithmetic": {
      "acc,none": 0.0542,
      "acc_stderr,none": 0.0015016016128460616,
      "alias": " - arithmetic"
    },
    "fld": {
      "exact_match,remove_whitespace": 0.0,
      "exact_match_stderr,remove_whitespace": 0.0,
      "alias": " - fld"
    },
    "minerva_math": {
      "exact_match,none": 0.04,
      "exact_match_stderr,none": 0.002766524263695846,
      "alias": " - minerva_math"
    }
  },
  "group_subtasks": {
    "minerva_math": [
      "minerva_math_precalc",
      "minerva_math_prealgebra",
      "minerva_math_num_theory",
      "minerva_math_intermediate_algebra",
      "minerva_math_geometry",
      "minerva_math_counting_and_prob",
      "minerva_math_algebra"
    ],
    "fld": [
      "fld_default",
      "fld_star"
    ],
    "arithmetic": [
      "arithmetic_3da",
      "arithmetic_3ds",
      "arithmetic_4da",
      "arithmetic_2ds",
      "arithmetic_5ds",
      "arithmetic_5da",
      "arithmetic_1dc",
      "arithmetic_4ds",
      "arithmetic_2dm",
      "arithmetic_2da"
    ],
    "reasoning-gen": [
      "arithmetic",
      "fld",
      "minerva_math",
      "gsm8k_cot",
      "gsm8k"
    ]
  },
  "configs": {
    "arithmetic_1dc": {
      "task": "arithmetic_1dc",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_1dc",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_2da": {
      "task": "arithmetic_2da",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_2da",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_2dm": {
      "task": "arithmetic_2dm",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_2dm",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_2ds": {
      "task": "arithmetic_2ds",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_2ds",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_3da": {
      "task": "arithmetic_3da",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_3da",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_3ds": {
      "task": "arithmetic_3ds",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_3ds",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_4da": {
      "task": "arithmetic_4da",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_4da",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_4ds": {
      "task": "arithmetic_4ds",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_4ds",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_5da": {
      "task": "arithmetic_5da",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_5da",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "arithmetic_5ds": {
      "task": "arithmetic_5ds",
      "group": [
        "arithmetic"
      ],
      "dataset_path": "EleutherAI/arithmetic",
      "dataset_name": "arithmetic_5ds",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "validation_split": "validation",
      "doc_to_text": "{{context}}",
      "doc_to_target": "{{completion}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "fld_default": {
      "task": "fld_default",
      "group": [
        "fld"
      ],
      "dataset_path": "hitachi-nlp/FLD.v2",
      "dataset_name": "default",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Based on the provided facts ($context$), either prove or disprove the hypothesis or state that it is unknown. {{prompt_serial}}",
      "doc_to_target": "world_assump_label",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "remove_whitespace",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "fld_star": {
      "task": "fld_star",
      "group": [
        "fld"
      ],
      "dataset_path": "hitachi-nlp/FLD.v2",
      "dataset_name": "star",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Based on the provided facts ($context$), either prove or disprove the hypothesis or state that it is unknown. {{prompt_serial}}",
      "doc_to_target": "world_assump_label",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "remove_whitespace",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "gsm8k": {
      "task": "gsm8k",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "gsm8k",
      "dataset_name": "main",
      "training_split": "train",
      "test_split": "test",
      "fewshot_split": "train",
      "doc_to_text": "Question: {{question}}\nAnswer:",
      "doc_to_target": "{{answer}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": false,
          "regexes_to_ignore": [
            ",",
            "\\$",
            "(?s).*#### ",
            "\\.$"
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "strict-match",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "#### (\\-?[0-9\\.\\,]+)"
            },
            {
              "function": "take_first"
            }
          ]
        },
        {
          "name": "flexible-extract",
          "filter": [
            {
              "function": "regex",
              "group_select": -1,
              "regex_pattern": "(-?[$0-9.,]{2,})|(-?[0-9]+)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 3.0
      }
    },
    "gsm8k_cot": {
      "task": "gsm8k_cot",
      "group": [
        "chain_of_thought"
      ],
      "dataset_path": "gsm8k",
      "dataset_name": "main",
      "test_split": "test",
      "doc_to_text": "Q: {{question}}\nA:",
      "doc_to_target": "{{answer.split('####')[-1].strip() if answer is defined else target}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "question": "There are 15 trees in the grove. Grove workers will plant trees in the grove today. After they are done, there will be 21 trees. How many trees did the grove workers plant today?",
            "target": "There are 15 trees originally. Then there were 21 trees after some more were planted. So there must have been 21 - 15 = 6. The answer is 6."
          },
          {
            "question": "If there are 3 cars in the parking lot and 2 more cars arrive, how many cars are in the parking lot?",
            "target": "There are originally 3 cars. 2 more cars arrive. 3 + 2 = 5. The answer is 5."
          },
          {
            "question": "Leah had 32 chocolates and her sister had 42. If they ate 35, how many pieces do they have left in total?",
            "target": "Originally, Leah had 32 chocolates. Her sister had 42. So in total they had 32 + 42 = 74. After eating 35, they had 74 - 35 = 39. The answer is 39."
          },
          {
            "question": "Jason had 20 lollipops. He gave Denny some lollipops. Now Jason has 12 lollipops. How many lollipops did Jason give to Denny?",
            "target": "Jason started with 20 lollipops. Then he had 12 after giving some to Denny. So he gave Denny 20 - 12 = 8. The answer is 8."
          },
          {
            "question": "Shawn has five toys. For Christmas, he got two toys each from his mom and dad. How many toys does he have now?",
            "target": "Shawn started with 5 toys. If he got 2 toys each from his mom and dad, then that is 4 more toys. 5 + 4 = 9. The answer is 9."
          },
          {
            "question": "There were nine computers in the server room. Five more computers were installed each day, from monday to thursday. How many computers are now in the server room?",
            "target": "There were originally 9 computers. For each of 4 days, 5 more computers were added. So 5 * 4 = 20 computers were added. 9 + 20 is 29. The answer is 29."
          },
          {
            "question": "Michael had 58 golf balls. On tuesday, he lost 23 golf balls. On wednesday, he lost 2 more. How many golf balls did he have at the end of wednesday?",
            "target": "Michael started with 58 golf balls. After losing 23 on tuesday, he had 58 - 23 = 35. After losing 2 more, he had 35 - 2 = 33 golf balls. The answer is 33."
          },
          {
            "question": "Olivia has $23. She bought five bagels for $3 each. How much money does she have left?",
            "target": "Olivia had 23 dollars. 5 bagels for 3 dollars each will be 5 x 3 = 15 dollars. So she has 23 - 15 dollars left. 23 - 15 is 8. The answer is 8."
          }
        ]
      },
      "num_fewshot": 8,
      "metric_list": [
        {
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": false,
          "metric": "exact_match",
          "regexes_to_ignore": [
            ",",
            "\\$",
            "(?s).*#### ",
            "\\.$"
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "do_sample": false,
        "until": [
          "Q:",
          "</s>",
          "<|im_end|>"
        ]
      },
      "repeats": 1,
      "filter_list": [
        {
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "The answer is (\\-?[0-9\\.\\,]+)."
            },
            {
              "function": "take_first"
            }
          ],
          "name": "strict-match"
        },
        {
          "filter": [
            {
              "function": "regex",
              "group_select": -1,
              "regex_pattern": "(-?[$0-9.,]{2,})|(-?[0-9]+)"
            },
            {
              "function": "take_first"
            }
          ],
          "name": "flexible-extract"
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 3.0
      }
    },
    "minerva_math_algebra": {
      "task": "minerva_math_algebra",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "EleutherAI/hendrycks_math",
      "dataset_name": "algebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f5c883c70a0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "minerva_math_counting_and_prob": {
      "task": "minerva_math_counting_and_prob",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "EleutherAI/hendrycks_math",
      "dataset_name": "counting_and_probability",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f5c880932e0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "minerva_math_geometry": {
      "task": "minerva_math_geometry",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "EleutherAI/hendrycks_math",
      "dataset_name": "geometry",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f5c880c5240>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "minerva_math_intermediate_algebra": {
      "task": "minerva_math_intermediate_algebra",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "EleutherAI/hendrycks_math",
      "dataset_name": "intermediate_algebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f5c880c71c0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "minerva_math_num_theory": {
      "task": "minerva_math_num_theory",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "EleutherAI/hendrycks_math",
      "dataset_name": "number_theory",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f5c82b251b0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "minerva_math_prealgebra": {
      "task": "minerva_math_prealgebra",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "EleutherAI/hendrycks_math",
      "dataset_name": "prealgebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f5c82b271c0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "minerva_math_precalc": {
      "task": "minerva_math_precalc",
      "group": [
        "math_word_problems"
      ],
      "dataset_path": "EleutherAI/hendrycks_math",
      "dataset_name": "precalculus",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x7f5c82b591b0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "arithmetic_1dc": 1.0,
    "arithmetic_2da": 1.0,
    "arithmetic_2dm": 1.0,
    "arithmetic_2ds": 1.0,
    "arithmetic_3da": 1.0,
    "arithmetic_3ds": 1.0,
    "arithmetic_4da": 1.0,
    "arithmetic_4ds": 1.0,
    "arithmetic_5da": 1.0,
    "arithmetic_5ds": 1.0,
    "fld_default": 2.0,
    "fld_star": 2.0,
    "gsm8k": 3.0,
    "gsm8k_cot": 3.0,
    "minerva_math_algebra": 1.0,
    "minerva_math_counting_and_prob": 1.0,
    "minerva_math_geometry": 1.0,
    "minerva_math_intermediate_algebra": 1.0,
    "minerva_math_num_theory": 1.0,
    "minerva_math_prealgebra": 1.0,
    "minerva_math_precalc": 1.0
  },
  "n-shot": {
    "arithmetic": 0,
    "arithmetic_1dc": 0,
    "arithmetic_2da": 0,
    "arithmetic_2dm": 0,
    "arithmetic_2ds": 0,
    "arithmetic_3da": 0,
    "arithmetic_3ds": 0,
    "arithmetic_4da": 0,
    "arithmetic_4ds": 0,
    "arithmetic_5da": 0,
    "arithmetic_5ds": 0,
    "fld": 0,
    "fld_default": 0,
    "fld_star": 0,
    "gsm8k": 5,
    "gsm8k_cot": 8,
    "minerva_math": 4,
    "minerva_math_algebra": 4,
    "minerva_math_counting_and_prob": 4,
    "minerva_math_geometry": 4,
    "minerva_math_intermediate_algebra": 4,
    "minerva_math_num_theory": 4,
    "minerva_math_prealgebra": 4,
    "minerva_math_precalc": 4,
    "reasoning-gen": 0
  },
  "higher_is_better": {
    "arithmetic": {
      "acc": true
    },
    "arithmetic_1dc": {
      "acc": true
    },
    "arithmetic_2da": {
      "acc": true
    },
    "arithmetic_2dm": {
      "acc": true
    },
    "arithmetic_2ds": {
      "acc": true
    },
    "arithmetic_3da": {
      "acc": true
    },
    "arithmetic_3ds": {
      "acc": true
    },
    "arithmetic_4da": {
      "acc": true
    },
    "arithmetic_4ds": {
      "acc": true
    },
    "arithmetic_5da": {
      "acc": true
    },
    "arithmetic_5ds": {
      "acc": true
    },
    "fld": {
      "exact_match": true
    },
    "fld_default": {
      "exact_match": true
    },
    "fld_star": {
      "exact_match": true
    },
    "gsm8k": {
      "exact_match": true
    },
    "gsm8k_cot": {
      "exact_match": true
    },
    "minerva_math": {
      "exact_match": true
    },
    "minerva_math_algebra": {
      "exact_match": true
    },
    "minerva_math_counting_and_prob": {
      "exact_match": true
    },
    "minerva_math_geometry": {
      "exact_match": true
    },
    "minerva_math_intermediate_algebra": {
      "exact_match": true
    },
    "minerva_math_num_theory": {
      "exact_match": true
    },
    "minerva_math_prealgebra": {
      "exact_match": true
    },
    "minerva_math_precalc": {
      "exact_match": true
    },
    "reasoning-gen": {
      "acc": true,
      "exact_match": true
    }
  },
  "n-samples": {
    "arithmetic_3da": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_3ds": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_4da": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_2ds": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_5ds": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_5da": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_1dc": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_4ds": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_2dm": {
      "original": 2000,
      "effective": 2000
    },
    "arithmetic_2da": {
      "original": 2000,
      "effective": 2000
    },
    "fld_default": {
      "original": 5000,
      "effective": 5000
    },
    "fld_star": {
      "original": 5000,
      "effective": 5000
    },
    "minerva_math_precalc": {
      "original": 546,
      "effective": 546
    },
    "minerva_math_prealgebra": {
      "original": 871,
      "effective": 871
    },
    "minerva_math_num_theory": {
      "original": 540,
      "effective": 540
    },
    "minerva_math_intermediate_algebra": {
      "original": 903,
      "effective": 903
    },
    "minerva_math_geometry": {
      "original": 479,
      "effective": 479
    },
    "minerva_math_counting_and_prob": {
      "original": 474,
      "effective": 474
    },
    "minerva_math_algebra": {
      "original": 1187,
      "effective": 1187
    },
    "gsm8k_cot": {
      "original": 1319,
      "effective": 1319
    },
    "gsm8k": {
      "original": 1319,
      "effective": 1319
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mosaicml/mpt-7b",
    "model_num_parameters": 6649286656,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "039e37745f00858f0e01e988383a8c4393b1a4f5",
    "batch_size": "4",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "856ad81",
  "date": 1717948888.749467,
  "pretty_env_info": "PyTorch version: 2.0.1+cu117\nIs debug build: False\nCUDA used to build PyTorch: 11.7\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 20.04.6 LTS (x86_64)\nGCC version: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nClang version: Could not collect\nCMake version: version 3.27.6\nLibc version: glibc-2.31\n\nPython version: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-5.19.17-coreweave-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A40\nGPU 1: NVIDIA A40\nGPU 2: NVIDIA A40\nGPU 3: NVIDIA A40\nGPU 4: NVIDIA A40\nGPU 5: NVIDIA A40\nGPU 6: NVIDIA A40\nGPU 7: NVIDIA A40\n\nNvidia driver version: 535.161.07\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                    x86_64\nCPU op-mode(s):                  32-bit, 64-bit\nByte Order:                      Little Endian\nAddress sizes:                   48 bits physical, 48 bits virtual\nCPU(s):                          96\nOn-line CPU(s) list:             0-95\nThread(s) per core:              2\nCore(s) per socket:              24\nSocket(s):                       2\nNUMA node(s):                    8\nVendor ID:                       AuthenticAMD\nCPU family:                      25\nModel:                           1\nModel name:                      AMD EPYC 7413 24-Core Processor\nStepping:                        1\nFrequency boost:                 enabled\nCPU MHz:                         3622.694\nCPU max MHz:                     3630.8101\nCPU min MHz:                     1500.0000\nBogoMIPS:                        5299.82\nVirtualization:                  AMD-V\nL1d cache:                       1.5 MiB\nL1i cache:                       1.5 MiB\nL2 cache:                        24 MiB\nL3 cache:                        256 MiB\nNUMA node0 CPU(s):               0-5,48-53\nNUMA node1 CPU(s):               6-11,54-59\nNUMA node2 CPU(s):               12-17,60-65\nNUMA node3 CPU(s):               18-23,66-71\nNUMA node4 CPU(s):               24-29,72-77\nNUMA node5 CPU(s):               30-35,78-83\nNUMA node6 CPU(s):               36-41,84-89\nNUMA node7 CPU(s):               42-47,90-95\nVulnerability Itlb multihit:     Not affected\nVulnerability L1tf:              Not affected\nVulnerability Mds:               Not affected\nVulnerability Meltdown:          Not affected\nVulnerability Mmio stale data:   Not affected\nVulnerability Retbleed:          Not affected\nVulnerability Spec store bypass: Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:        Mitigation; Retpolines, IBPB conditional, IBRS_FW, STIBP always-on, RSB filling, PBRSB-eIBRS Not affected\nVulnerability Srbds:             Not affected\nVulnerability Tsx async abort:   Not affected\nFlags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate ssbd mba ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd amd_ppin brs arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif v_spec_ctrl umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca fsrm\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.23.1\n[pip3] torch==2.0.1\n[conda] numpy                     1.23.1                   pypi_0    pypi\n[conda] torch                     2.0.1                    pypi_0    pypi",
  "transformers_version": "4.33.3",
  "upper_git_hash": null,
  "task_hashes": {
    "arithmetic_3da": "b8368f8cea26c2125b27bd7bb1e378edc56c615956d6d323b12bbcc4639696c1",
    "arithmetic_3ds": "bd9e1ac5e4ef09174e359e02aafc7b87980373b33b9e8d6cfd45ac750253e73d",
    "arithmetic_4da": "b44cfc3be034e8d7a1c1fbefd3e7bf81ed753857595f5ca49d99cf51676ec521",
    "arithmetic_2ds": "22f57390e4a1d08e1be3a4cce2083dcbdb18957f968dd0b76443cf768be2a9b7",
    "arithmetic_5ds": "1f79646097a6c406d3eea33b3ca68ce94d1e985e7a9f3afd6cb417d7cbd491ec",
    "arithmetic_5da": "f2d8c7eb643b922258c98ac164a95bf21dd3374553d2d793e0e177626453df6c",
    "arithmetic_1dc": "b64722ac6b7fd395987945404914a3684d79dc91acfd0bd76c73773ec29bc5ce",
    "arithmetic_4ds": "bc19aa9b19a35294d2b0f82ac87fd0e8dea020fb95faaa125e94f42e7a30f35c",
    "arithmetic_2dm": "b314c92669e796b9287d41fe9a1bffebf307ff1616717c0d5830393b05ae463a",
    "arithmetic_2da": "1440e5d3d0f122f1812621c1080820abbbc8b50b54f41b98552d522850ecbf37",
    "fld_default": "4a27eb8f4052b9a6bce3273660c846432ad42ae719e981d8898800edb4fe9417",
    "fld_star": "ffccdf42173bf4a358c3ebcbc1b7f984766d4fe7e17fc261a15336329c97a045",
    "minerva_math_precalc": "1f27730753ee7cd62d6de902471a10a0adb5e0254b7d6014f56f459820aec022",
    "minerva_math_prealgebra": "27c50c162f003f7257958233b7e6501b6250cf8c580dda185ddc2f76ff9ae866",
    "minerva_math_num_theory": "0d8bdb3a26388da49d3e8d8419869655a3a3247dde250e368e44534cf5bba0ea",
    "minerva_math_intermediate_algebra": "1f523afc1e3a8ca005120f5c859d3ca68c7cc592bddc4d583eab99c076f188d1",
    "minerva_math_geometry": "a089b5ed647abeb1874a75b3212f265db6f797cb85a56c4ee8b6dcba00bb946f",
    "minerva_math_counting_and_prob": "7edba0e802d0ed4e586e3511f6cc4f7d369268a05835a9a4160e9c79236c0718",
    "minerva_math_algebra": "185f34b170fd1ddec0f7e4c6f6b46ec8e3634ad4c99d822a3e2f0a964a15f0d5",
    "gsm8k_cot": "8bfb65be4a85fbd2132db53a2972aeafc6f2df37578d6d64b857ab0602d4471d",
    "gsm8k": "6dc2d8763af1e4661e72a6cdacb6cca4979ac315556ee509687d296da8051cc2"
  },
  "model_source": "hf",
  "model_name": "mosaicml/mpt-7b",
  "model_name_sanitized": "mosaicml__mpt-7b",
  "system_instruction": null,
  "system_instruction_sha": null,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 7445797.460477764,
  "end_time": 7448554.216034392,
  "total_evaluation_time_seconds": "2756.755556628108"
}